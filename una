#!/usr/bin/python3

import os, sys
import pstr
import platform as pl

def uname_linx_1():
    sysname, nodename, release, version, machine = os.uname()
    opst = "GNU/Linux"
    py_version = pl.python_version()           # 3.7.5
    py_imp = pl.python_implementation()
    py_com = pl.python_compiler() 
    py_b1, py_b2 = pl.python_build()
    py_d = pl.linux_distribution()
    py_lv = pl.libc_ver()
    py_a = pl.architecture() 
    py_pl = pl.platform() 
    
    system_name = os.name
    if system_name == "posix":
        System_name = 'GNU/Linux'
    else:
        System_name = "Microswft"

    Ulist = [sysname, nodename, release, version, machine]# , operating_system]
    Uhlist = ['system name', 'host name', 'release', 'version', 'machine'] # 'operating system']

    Ul = len(Ulist)
    Ul = int(Ul)

    s = '<!196>*<!e>'
    l = '<!m>|<!e>'
    ls = '<!bu>-<!e>'
    
    info = '<!33>'
    qu = '<!33>'

    valu = '<!c>'
    key = '<!y>'

    ## this is system info
    def system_info():
        print('')
        pstr.pss(f"<!r> ?<!e> {qu}System:\t\t <!r>!<!e> {info}Info:"+'\n '+f'{ls}'*42)
        for i in range(0, Ul):
            pstr.pss(f" {s} {key}{Uhlist[i]}:\t\t {l} {s} {valu}{Ulist[i]} <!e>")
        pstr.pss(f' {s} {key}architecture\t\t {l} {s} {valu}{py_a[0]} {py_a[1]}')
        pstr.pss(f' {s} {key}platform\t\t {l} {s} {valu}{py_pl}')
        if pl.platform == 'ubunt':
            pstr.pss(f' {s} {key}operating system\t {l} {s} {valu}{opst}')
        else:
            pstr.pss(f' {s} {key}operating system\t {l} {s} {valu}{system_name}, {System_name}')

    ##this is python info
    def python_info():
        pstr.pss(f"<!r>\n ?<!e> {qu}Python:\t\t <!r>!<!e> {info}Info:\n "+ f'{ls}'*42)
        pstr.pss(f' {s} {key}python version\t {l} {s} {valu}{py_version}')
        pstr.pss(f' {s} {key}python implementation {l} {s} {valu}{py_imp}')
        pstr.pss(f' {s} {key}python compiler\t {l} {s} {valu}{py_com}')
        pstr.pss(f' {s} {key}python build\t\t {l} {s} {valu}{py_b1} {py_b2}')

    ## this is Distributor inof
    def distributor_info():
        pstr.pss(f"<!r>\n ?<!e> {qu}Distributor:\t\t <!r>!<!e> {info}Info:\n "+ f'{ls}'*42)
        pstr.pss(f' {s} {key}Distributor ID\t {l} {s} {valu}{py_d[0]}')
        pstr.pss(f' {s} {key}Release\t\t {l} {s} {valu}{py_d[1]}')
        pstr.pss(f' {s} {key}Codename\t\t {l} {s} {valu}{py_d[2]}')
        pstr.pss(f' {s} {key}libc ver\t\t {l} {s} {valu}{py_lv[0]} {py_lv[1]}')
    
    def Help():
            pstr.pss("""\
 Usage: una [option]
    system, s   print all info about Your system
    python, p   print all info about Your python version
    dist  , d   print all info about Your Distributor

 example:
    una s (or) -s
    una --system (or) system

    print without color
    una no s (or) -s (or) --system (or) system
    una no a (or) -a (or) --all (or) all
            """)
            sys.exit(1)
    try:
        def if_set(num):
            if sys.argv[num] in ('system', 's', '-s', '--system'):
                system_info()
                sys.exit(0)
            elif sys.argv[num] in ('python', 'p', '-p', '--python'):
                python_info()
                sys.exit(0)
            elif sys.argv[num] in ('distributor', 'dis', 'dist', 'd', '-d', '--dist'):
                distributor_info()
                sys.exit(0)
            elif sys.argv[num] in ('all', 'a', '--all', '-a'):
                system_info()
                python_info()
                distributor_info()
                sys.exit(0)
            else:
                Help()

        if sys.argv[1] in ('nocolor', 'no-color', 'no', '--no-color', '-no'):
            s = '*'
            l = '|'
            ls = '-'
            info = ''
            qu = ''
            valu = ''
            key = ''
            if_set(2)
            
        if_set(1)
    except IndexError:
            Help()
            
if __name__ == "__main__":
    uname_linx_1()
